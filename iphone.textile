---
layout: post
title: iD iPhone / iPad Dev Notes
categories:
- id
updated_at: 2011-06-26
uuid: 5187C4DC-1753-43DE-93DC-25878A2B0A93
---

h1. Resources for iPhone Dev

h2. Get your Certificates installed!

To do this grab your certificates !/assets/images/iphone/certs.png(Princeton Certs)!, and double click it. It's normal to have these password protected.
    
  
Connect your iOS device. Then open XCode, go to Window -> Organiser. You should see your iThingie in there and you right click on its name on the left side, then click "Use for Development" - that mixed with your Apple Developer account username / password combo should be all you need to get started on your device.


h1. Project 1

h2. My Flippy App

We want to make an app that uses our images and flips between two separate pages in the app. This app involves no code at all and is just a matter of understanding how Interface Builder works. And how show your own images in an iPhone app.

"!/assets/images/iphone/flippy.jpg(Flippy stuff)!":/assets/files/iphone/FlippyView.zip


h1. Project 2

h2. Buttons McButtons

We want to make an app that has buttons that you click that writes some debug text out to the console. The console is an area where you can throw text, but anyone using your app doesn't see it unless they get a crash report.

"!/assets/images/iphone/buttons.jpg(Pressing things)!":/assets/files/iphone/ButtonsMcButtons.zip

The only code we are going to write is a button clicked method, you can see it below.

h4(code_heading). ButtonsMcButtonsViewController.h - header file

{% highlight objc %}
  - (IBAction)thanksClicked:(id)sender;
{% endhighlight %}


h4(code_heading). ButtonsMcButtonsViewController.m - implementation file

{% highlight objc %}
  - (IBAction)thanksClicked:(id)sender {
    NSLog(@"Aww that's really nice of you!");
  }
{% endhighlight %}

This code has to be hooked up via Interface Builder, by double clicking on the *ButtonsMcButtonsView.xib*, adding a UIButton, then right clicking on the _"Files Owner"_ object, and dragging the small circle next to _thanksClicked_ to your button in the view.


h1. Project 3

h2. NoisyBot

We want to play some audio, in this case we want to play some "Boxxy":http://knowyourmeme.com/memes/boxxy and be able to pause her beautiful song. 

"!/assets/images/iphone/sounds.jpg(Pressing things)!":/assets/files/iphone/NoisyBot.zip

To do that we need to include the AVFoundation framework into our application, in XCode 3 you right click on _Frameworks_ , then go to _Add Frameworks_. It should be in that list.

h4(code_heading). ButtonsMcButtonsViewController.m - implementation file

{% highlight objc %}
- (IBAction)playClicked:(id)sender {
  
  // Open a music file that's been dragged into the project, called boxxy.mp3
  NSString * mp3Path = [NSString stringWithFormat:@"%@/boxxy.mp3", [[NSBundle mainBundle] resourcePath]];
  NSURL *url = [NSURL fileURLWithPath:mp3Path];
  
  // create an AudioPlayer with the file used above
	NSError *error;
	audioPlayer = [[AVAudioPlayer alloc] initWithContentsOfURL:url error:&error];  
	if (audioPlayer == nil)
		NSLog(@"Error playing sound %@", [error description]);
	else
		[audioPlayer play];
}
{% endhighlight %}


h1. Project 4

h2. WebbyBoy

Its time to start working with IBOutlets, working on applications that contain references to the views in addition to ones that you can press buttons with. This example also shows how to use the "delegate pattern":http://en.wikipedia.org/wiki/Delegation_pattern and how to use your own methods to make sure you're not duplicating code.

"!/assets/images/iphone/webbyboy.jpg(Web Browser App)!":/assets/files/iphone/WebbyBoy.zip

The parts that are interesting are, 

h4(code_heading). WebbyBoyViewController.h - header file

{% highlight objc %}
@interface WebbyBoyViewController : UIViewController {
  UIWebView *webView;
  IBOutlet UITextField *urlTextField;
}

// When someone presses enter its the same thing
// as pressing a button from the code's perspective
- (IBAction)urlTypedIn:(id)sender;
- (IBAction)searchRequestTyped:(id)sender;

- (IBAction)backPressed:(id)sender;
- (IBAction)forwardsPressed:(id)sender;

// We define our own method to load a web address
// using a string to make it simpler
- (void) loadURLString: (NSString*)address;
@end

{% endhighlight %}

h1. Project 5

h2. AnotherImageGallery57

Next up is looking at ways of sending messages between ViewControllers, again using the delegate pattern and this time using protocols to make sure that we can guarantee that the delegate has the methods we expect. It also uses a different transition when changing between views.

"!/assets/images/iphone/anothergallery57.jpg(Image Gallery App)!":/assets/files/iphone/WebbyBoy.zip


h1. Project 6

h2. SedgwickPong

So, sometimes people want to diverge into games. This is cool, so its always a good idea to start working on some of the simpler games in existence, so here's a copy of Pong. 

"!/assets/images/iphone/sedgwickpong.jpg(Pong Game)!":/assets/files/iphone/WebbyBoy.zip

This is the first app that uses _#define_ to let us create readble code when dealing with numbers. It also is the first to have a seperate run loop ( in this case it is below, running the ball movement and collision detection. )

h4(code_heading). PongLayer.h - header file

{% highlight objc %}
#define UPLEFT 0
#define UPRIGHT 1
#define DOWNLEFT 2
#define DOWNRIGHT 3

#import "cocos2d.h"

@interface PongLayer : CCLayer {
  CCSprite * player_1_bar;
  CCSprite * player_2_bar;
  CCSprite * ball;
  
  int direction;
  float speed;
}

+(CCScene *) scene;
-(void) moveBall;
-(void) checkForCollisions;
@end
{% endhighlight %}

h4(code_heading). PongLayer.m - implementation file

{% highlight objc %}
// this is our run loop, where the collision detection
// and ball movement code is held 
-(void) step: (ccTime) delta {
  [self moveBall];
  [self checkForCollisions];
} 
{% endhighlight %}


h1. Quickies

h2. Apps without ViewControllers

Don't do it.

h2. Change an App Name

Do it in the *info.plist* (this is usually [app-name]-info.plist)

h2. Change App Icon

Make a 72x72 icon, name it Icon.png go to your *info.plist* and write that as your Icon file.

h2. Change App Loading Screen

Make a 480x320 image, name it Default.png, drag it in.

h2. Retina stuff

<p>Any images that are the same, you do [imagename]2x@[filetype] and the iOS will use that instead on a retina displat, this is true with the icon / splash screen. E.g. Icon.png -> Icon@2x.png</p>

h2. Landscape App

To make an application landscape you have to override _shouldAutorotateToInterfaceOrientation_: in your ViewController

{% highlight objc %}
- (BOOL)shouldAutorotateToInterfaceOrientation: (UIInterfaceOrientation)interfaceOrientation {
  return (interfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
}
{% endhighlight %}

h2. Remove Status Bar

Go into the *info.plist* and add another key / value pair, add _"Status Bar is Initially Hidden"_ and set to true. This won't remove them from your individual views / windows. You can do that in Interface Builder.

h2. Dealing with Multiple Orientations

You need to override _shouldAutorotateToInterfaceOrientation_ to return _YES_. After that you need to look into the resizing of the UI when it's rotated, this is best done in Interface Builder, loading the _Inspector_ and clicking the ruler at the top. Changing how the app resizes is done by defining which parts stay static and which can scale.

h2. App Works In Simulator But Not On Device

( May be jailbreak related; but I've always dev'ed on jailbroken iPhones, take it as you will.)

If you're seeing a lot of debug logs about UUID mismatches for object files, go and delete the files related to the iOS version for the device. You can find your list here:
*/Developer/Platforms/iPhoneOS.platform/DeviceSupport* if you unplug and replug in the iPhone it'll recreate them. It's fixed it for me before.
